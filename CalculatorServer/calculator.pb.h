// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calculator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_calculator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_calculator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_calculator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_calculator_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_calculator_2eproto;
namespace calculator {
class LoadIntervalRequest;
class LoadIntervalRequestDefaultTypeInternal;
extern LoadIntervalRequestDefaultTypeInternal _LoadIntervalRequest_default_instance_;
class LoadResponse;
class LoadResponseDefaultTypeInternal;
extern LoadResponseDefaultTypeInternal _LoadResponse_default_instance_;
class OperationRequest;
class OperationRequestDefaultTypeInternal;
extern OperationRequestDefaultTypeInternal _OperationRequest_default_instance_;
class OperationResponse;
class OperationResponseDefaultTypeInternal;
extern OperationResponseDefaultTypeInternal _OperationResponse_default_instance_;
}  // namespace calculator
PROTOBUF_NAMESPACE_OPEN
template<> ::calculator::LoadIntervalRequest* Arena::CreateMaybeMessage<::calculator::LoadIntervalRequest>(Arena*);
template<> ::calculator::LoadResponse* Arena::CreateMaybeMessage<::calculator::LoadResponse>(Arena*);
template<> ::calculator::OperationRequest* Arena::CreateMaybeMessage<::calculator::OperationRequest>(Arena*);
template<> ::calculator::OperationResponse* Arena::CreateMaybeMessage<::calculator::OperationResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace calculator {

enum OperationRequest_Operators : int {
  OperationRequest_Operators_ADD = 0,
  OperationRequest_Operators_SUBTRACT = 1,
  OperationRequest_Operators_MULTIPLY = 2,
  OperationRequest_Operators_DIVIDE = 3,
  OperationRequest_Operators_OperationRequest_Operators_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OperationRequest_Operators_OperationRequest_Operators_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OperationRequest_Operators_IsValid(int value);
constexpr OperationRequest_Operators OperationRequest_Operators_Operators_MIN = OperationRequest_Operators_ADD;
constexpr OperationRequest_Operators OperationRequest_Operators_Operators_MAX = OperationRequest_Operators_DIVIDE;
constexpr int OperationRequest_Operators_Operators_ARRAYSIZE = OperationRequest_Operators_Operators_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperationRequest_Operators_descriptor();
template<typename T>
inline const std::string& OperationRequest_Operators_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OperationRequest_Operators>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OperationRequest_Operators_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OperationRequest_Operators_descriptor(), enum_t_value);
}
inline bool OperationRequest_Operators_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OperationRequest_Operators* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OperationRequest_Operators>(
    OperationRequest_Operators_descriptor(), name, value);
}
// ===================================================================

class OperationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:calculator.OperationRequest) */ {
 public:
  inline OperationRequest() : OperationRequest(nullptr) {}
  virtual ~OperationRequest();

  OperationRequest(const OperationRequest& from);
  OperationRequest(OperationRequest&& from) noexcept
    : OperationRequest() {
    *this = ::std::move(from);
  }

  inline OperationRequest& operator=(const OperationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationRequest& operator=(OperationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OperationRequest& default_instance();

  static inline const OperationRequest* internal_default_instance() {
    return reinterpret_cast<const OperationRequest*>(
               &_OperationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OperationRequest& a, OperationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperationRequest* New() const final {
    return CreateMaybeMessage<OperationRequest>(nullptr);
  }

  OperationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperationRequest& from);
  void MergeFrom(const OperationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "calculator.OperationRequest";
  }
  protected:
  explicit OperationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_calculator_2eproto);
    return ::descriptor_table_calculator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef OperationRequest_Operators Operators;
  static constexpr Operators ADD =
    OperationRequest_Operators_ADD;
  static constexpr Operators SUBTRACT =
    OperationRequest_Operators_SUBTRACT;
  static constexpr Operators MULTIPLY =
    OperationRequest_Operators_MULTIPLY;
  static constexpr Operators DIVIDE =
    OperationRequest_Operators_DIVIDE;
  static inline bool Operators_IsValid(int value) {
    return OperationRequest_Operators_IsValid(value);
  }
  static constexpr Operators Operators_MIN =
    OperationRequest_Operators_Operators_MIN;
  static constexpr Operators Operators_MAX =
    OperationRequest_Operators_Operators_MAX;
  static constexpr int Operators_ARRAYSIZE =
    OperationRequest_Operators_Operators_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Operators_descriptor() {
    return OperationRequest_Operators_descriptor();
  }
  template<typename T>
  static inline const std::string& Operators_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Operators>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Operators_Name.");
    return OperationRequest_Operators_Name(enum_t_value);
  }
  static inline bool Operators_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Operators* value) {
    return OperationRequest_Operators_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
    kBFieldNumber = 2,
    kOperatorFieldNumber = 3,
  };
  // double a = 1;
  void clear_a();
  double a() const;
  void set_a(double value);
  private:
  double _internal_a() const;
  void _internal_set_a(double value);
  public:

  // double b = 2;
  void clear_b();
  double b() const;
  void set_b(double value);
  private:
  double _internal_b() const;
  void _internal_set_b(double value);
  public:

  // .calculator.OperationRequest.Operators operator = 3;
  void clear_operator_();
  ::calculator::OperationRequest_Operators operator_() const;
  void set_operator_(::calculator::OperationRequest_Operators value);
  private:
  ::calculator::OperationRequest_Operators _internal_operator_() const;
  void _internal_set_operator_(::calculator::OperationRequest_Operators value);
  public:

  // @@protoc_insertion_point(class_scope:calculator.OperationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double a_;
  double b_;
  int operator__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_calculator_2eproto;
};
// -------------------------------------------------------------------

class OperationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:calculator.OperationResponse) */ {
 public:
  inline OperationResponse() : OperationResponse(nullptr) {}
  virtual ~OperationResponse();

  OperationResponse(const OperationResponse& from);
  OperationResponse(OperationResponse&& from) noexcept
    : OperationResponse() {
    *this = ::std::move(from);
  }

  inline OperationResponse& operator=(const OperationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationResponse& operator=(OperationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OperationResponse& default_instance();

  static inline const OperationResponse* internal_default_instance() {
    return reinterpret_cast<const OperationResponse*>(
               &_OperationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OperationResponse& a, OperationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperationResponse* New() const final {
    return CreateMaybeMessage<OperationResponse>(nullptr);
  }

  OperationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperationResponse& from);
  void MergeFrom(const OperationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "calculator.OperationResponse";
  }
  protected:
  explicit OperationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_calculator_2eproto);
    return ::descriptor_table_calculator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // double result = 1;
  void clear_result();
  double result() const;
  void set_result(double value);
  private:
  double _internal_result() const;
  void _internal_set_result(double value);
  public:

  // @@protoc_insertion_point(class_scope:calculator.OperationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_calculator_2eproto;
};
// -------------------------------------------------------------------

class LoadIntervalRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:calculator.LoadIntervalRequest) */ {
 public:
  inline LoadIntervalRequest() : LoadIntervalRequest(nullptr) {}
  virtual ~LoadIntervalRequest();

  LoadIntervalRequest(const LoadIntervalRequest& from);
  LoadIntervalRequest(LoadIntervalRequest&& from) noexcept
    : LoadIntervalRequest() {
    *this = ::std::move(from);
  }

  inline LoadIntervalRequest& operator=(const LoadIntervalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadIntervalRequest& operator=(LoadIntervalRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadIntervalRequest& default_instance();

  static inline const LoadIntervalRequest* internal_default_instance() {
    return reinterpret_cast<const LoadIntervalRequest*>(
               &_LoadIntervalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoadIntervalRequest& a, LoadIntervalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadIntervalRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadIntervalRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadIntervalRequest* New() const final {
    return CreateMaybeMessage<LoadIntervalRequest>(nullptr);
  }

  LoadIntervalRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadIntervalRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadIntervalRequest& from);
  void MergeFrom(const LoadIntervalRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadIntervalRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "calculator.LoadIntervalRequest";
  }
  protected:
  explicit LoadIntervalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_calculator_2eproto);
    return ::descriptor_table_calculator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntervalInSecondsFieldNumber = 1,
  };
  // int32 intervalInSeconds = 1;
  void clear_intervalinseconds();
  ::PROTOBUF_NAMESPACE_ID::int32 intervalinseconds() const;
  void set_intervalinseconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_intervalinseconds() const;
  void _internal_set_intervalinseconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:calculator.LoadIntervalRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 intervalinseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_calculator_2eproto;
};
// -------------------------------------------------------------------

class LoadResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:calculator.LoadResponse) */ {
 public:
  inline LoadResponse() : LoadResponse(nullptr) {}
  virtual ~LoadResponse();

  LoadResponse(const LoadResponse& from);
  LoadResponse(LoadResponse&& from) noexcept
    : LoadResponse() {
    *this = ::std::move(from);
  }

  inline LoadResponse& operator=(const LoadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadResponse& operator=(LoadResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadResponse& default_instance();

  static inline const LoadResponse* internal_default_instance() {
    return reinterpret_cast<const LoadResponse*>(
               &_LoadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LoadResponse& a, LoadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadResponse* New() const final {
    return CreateMaybeMessage<LoadResponse>(nullptr);
  }

  LoadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadResponse& from);
  void MergeFrom(const LoadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "calculator.LoadResponse";
  }
  protected:
  explicit LoadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_calculator_2eproto);
    return ::descriptor_table_calculator_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvocationsPerMinutesFieldNumber = 1,
  };
  // double invocationsPerMinutes = 1;
  void clear_invocationsperminutes();
  double invocationsperminutes() const;
  void set_invocationsperminutes(double value);
  private:
  double _internal_invocationsperminutes() const;
  void _internal_set_invocationsperminutes(double value);
  public:

  // @@protoc_insertion_point(class_scope:calculator.LoadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double invocationsperminutes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_calculator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OperationRequest

// double a = 1;
inline void OperationRequest::clear_a() {
  a_ = 0;
}
inline double OperationRequest::_internal_a() const {
  return a_;
}
inline double OperationRequest::a() const {
  // @@protoc_insertion_point(field_get:calculator.OperationRequest.a)
  return _internal_a();
}
inline void OperationRequest::_internal_set_a(double value) {
  
  a_ = value;
}
inline void OperationRequest::set_a(double value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:calculator.OperationRequest.a)
}

// double b = 2;
inline void OperationRequest::clear_b() {
  b_ = 0;
}
inline double OperationRequest::_internal_b() const {
  return b_;
}
inline double OperationRequest::b() const {
  // @@protoc_insertion_point(field_get:calculator.OperationRequest.b)
  return _internal_b();
}
inline void OperationRequest::_internal_set_b(double value) {
  
  b_ = value;
}
inline void OperationRequest::set_b(double value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:calculator.OperationRequest.b)
}

// .calculator.OperationRequest.Operators operator = 3;
inline void OperationRequest::clear_operator_() {
  operator__ = 0;
}
inline ::calculator::OperationRequest_Operators OperationRequest::_internal_operator_() const {
  return static_cast< ::calculator::OperationRequest_Operators >(operator__);
}
inline ::calculator::OperationRequest_Operators OperationRequest::operator_() const {
  // @@protoc_insertion_point(field_get:calculator.OperationRequest.operator)
  return _internal_operator_();
}
inline void OperationRequest::_internal_set_operator_(::calculator::OperationRequest_Operators value) {
  
  operator__ = value;
}
inline void OperationRequest::set_operator_(::calculator::OperationRequest_Operators value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:calculator.OperationRequest.operator)
}

// -------------------------------------------------------------------

// OperationResponse

// double result = 1;
inline void OperationResponse::clear_result() {
  result_ = 0;
}
inline double OperationResponse::_internal_result() const {
  return result_;
}
inline double OperationResponse::result() const {
  // @@protoc_insertion_point(field_get:calculator.OperationResponse.result)
  return _internal_result();
}
inline void OperationResponse::_internal_set_result(double value) {
  
  result_ = value;
}
inline void OperationResponse::set_result(double value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:calculator.OperationResponse.result)
}

// -------------------------------------------------------------------

// LoadIntervalRequest

// int32 intervalInSeconds = 1;
inline void LoadIntervalRequest::clear_intervalinseconds() {
  intervalinseconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadIntervalRequest::_internal_intervalinseconds() const {
  return intervalinseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoadIntervalRequest::intervalinseconds() const {
  // @@protoc_insertion_point(field_get:calculator.LoadIntervalRequest.intervalInSeconds)
  return _internal_intervalinseconds();
}
inline void LoadIntervalRequest::_internal_set_intervalinseconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  intervalinseconds_ = value;
}
inline void LoadIntervalRequest::set_intervalinseconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_intervalinseconds(value);
  // @@protoc_insertion_point(field_set:calculator.LoadIntervalRequest.intervalInSeconds)
}

// -------------------------------------------------------------------

// LoadResponse

// double invocationsPerMinutes = 1;
inline void LoadResponse::clear_invocationsperminutes() {
  invocationsperminutes_ = 0;
}
inline double LoadResponse::_internal_invocationsperminutes() const {
  return invocationsperminutes_;
}
inline double LoadResponse::invocationsperminutes() const {
  // @@protoc_insertion_point(field_get:calculator.LoadResponse.invocationsPerMinutes)
  return _internal_invocationsperminutes();
}
inline void LoadResponse::_internal_set_invocationsperminutes(double value) {
  
  invocationsperminutes_ = value;
}
inline void LoadResponse::set_invocationsperminutes(double value) {
  _internal_set_invocationsperminutes(value);
  // @@protoc_insertion_point(field_set:calculator.LoadResponse.invocationsPerMinutes)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace calculator

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::calculator::OperationRequest_Operators> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::calculator::OperationRequest_Operators>() {
  return ::calculator::OperationRequest_Operators_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_calculator_2eproto
